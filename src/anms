#!/bin/bash

###
# Automated Network Module Synchronizer (ANMS)
#

declare address="$1"
declare domain="`sed 's/^[^:]\+:\/\///' <<< $address`"
declare manifest="$address/manifest.yml"
declare yml_prefix="yml_"
declare home="/etc/anms"
declare webdl webchk

declare -A webkit_dl=( [wget]="wget -qO- " [curl]="curl " )
declare -A webkit_chk=( [wget]="wget -S --spider " [curl]="curl --silent -I " )

###
# Checking environment
#
for n in tac sed awk grep tar md5sum; do
    if ! which $n >/dev/null 2>&1; then
        echo "Missing command '$n'" >&2; exit 1
    fi
done

###
# Userly a distro comes with at least one of these. 
# However they do not always pack both.
#
for n in ${!webkit_dl[*]}; do
    if which $n >/dev/null 2>&1; then
        webdl="${webkit_dl[$n]}"
        webchk="${webkit_chk[$n]}"
        
        break
    fi
done

if [ -z "$webdl" ]; then
    echo "Missing wget or curl" >&2; exit 1
    
elif [ -z "$address" ]; then
    echo "Missing server address" >&2; exit 1
    
elif [ ! -d "$home" ]; then
    mkdir "$home"
fi

###
# This function will Parse a simple YAML file
# and will output bash variables
#
# Typical Usage:
# eval $(yml_parse sample.yml)
#
# @author Stefan Farestam
#
yml_parse() {
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$'\034'
   local input="$1"

   sed -ne "s|^\($s\):|\1|" \
        -e 's|`||g;s|\$||g;' \
        -e "s|^\($s\)\($w\)$s:$s[\"']\(.*\)[\"']$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" $input |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {
        if (i > indent) {
            delete vname[i]
        }
      }
      
      vn=""; 
      for (i=0; i<indent; i++) {
        vn=(vn)(vname[i])("_")
      }

      gsub(/^[ \t]+/, "", $3); 
      gsub(/[ \t]+$/, "", $3);
      
      printf("declare %s%s%s=\"%s\"\n", "'$yml_prefix'",vn, $2, $3);
   }'
}

###
#
#
yml_defined() {
    local varstr="${yml_prefix}${1}"
    shift
    
    varstr="`printf $varstr $@`"
    
    if [ -n "${!varstr}" ]; then
        return 0
    fi
    
    return 1
}

###
#
#
yml_get() {
    local varstr="${yml_prefix}${1}"
    shift
    
    varstr="`printf $varstr $@`"
    
    echo ${!varstr}
}

###
#
#
yml_cmp() {
    local varstr="${yml_prefix}${1}"
    local cmpstr="$2"
    shift 2
    
    varstr="`printf $varstr $@`"
    
    if [[ "${!varstr}" == "$cmpstr" ]]; then
        return 0
    fi
    
    return 1
}

###
#
#
pkg_install() {
    local mod="$1"
    local file="$2"
    local archive="/tmp/$(basename "$file")"
    local mperm muid mgid mpath
    local arg=install
    local hash
    
    echo "Installing module '$mod'"
    $webdl $file > $archive
    hash=`md5sum $archive 2>/dev/null | awk '{print $1}'`
    
    if yml_cmp %s_file_md5 "$hash" "$mod"; then
        if [ ! -d "$home/$mod" ]; then
            mkdir "$home/$mod"
        
        elif [ -f "$home/$mod/files.lst" ]; then
            cp "$home/$mod/files.lst" "$home/$mod/files.old.lst"
            arg=update
        fi
        
        echo -e "\tExtracting files"
        for file in `tar -tf $archive | grep -ve '^src/$' | grep -e '^src/' | sed 's/^src\///' | tee "$home/$mod/files.lst"`; do
            if grep -qe '/$' <<< "$file"; then
                if [ ! -d "/$file" ]; then
                    mkdir "/$file"
                fi
            
            else
                tar -xf $archive "src/$file" -O > "/$file"
            fi
        done
        
        echo -e "\tSetting file permissions"
        if tar -tf $archive | grep -q 'permissions'; then
            for perm in `tar -xf $archive 'permissions' -O`; do
                mpath="$(awk -F: '{print $1}' <<< $perm)"
                
                if [ -e "$mpath" ]; then
                    mperm=$(awk -F: '{print $2}' <<< $perm)
                    muid=$(awk -F: '{print $3}' <<< $perm)
                    mgid=$(awk -F: '{print $4}' <<< $perm)
                    
                    if [ -n "$mperm" ]; then
                        chmod $mperm "$mpath" 2>/dev/null
                    fi
                    
                    if [ -n "$muid" ]; then
                        chown $muid "$mpath" 2>/dev/null
                    fi
                    
                    if [ -n "$mgid" ]; then
                        chgrp $mgid "$mpath" 2>/dev/null
                    fi
                    
                else
                    echo -e "\tCould not set permissions on '$mpath'. No such path" >&2
                fi
            done
        fi
        
        echo -e "\tRemoving old files"
        if [ -f "$home/$mod/files.old.lst" ]; then
            for file in `tac "$home/$mod/files.old.lst"`; do
                if ! grep -qe "^${file}$" "$home/$mod/files.lst"; then
                    if grep -qe '/$' <<< "$file"; then
                        if [ -d "/$file" ] && [ -z "$(ls -A "/$file")" ]; then
                            rmdir "/$file" 2>/dev/null
                            
                        else
                            echo -e "\tNot removing '/$file'. Directory is not empty" >&2
                        fi
                    
                    else
                        rm "/$file" 2>/dev/null
                    fi
                fi
            done
        fi
        
        echo -e "\tRunning install script"
        if tar -tf $archive | grep -q 'install'; then
            if ! tar -xf $archive 'install' -O | bash -s -- $arg > >(sed 's/\(.*\)/\t\1/') 2> >(sed 's/\(.*\)/\t\1/' >&2); then
                echo -e "\tThe install script failed to run properly" >&2
            fi
        fi
        
        echo -e "\tFinalizing installation"
        echo $hash > "$home/$mod/hash.md5"
        
        if tar -tf $archive | grep -q 'uninstall'; then
            tar -xf $archive 'uninstall' -O > "$home/$mod/uninstall"
        fi

        rm "$home/$mod/files.old.lst" 2>/dev/null
        rm $archive 2>/dev/null
    
    else
        echo "Mismatch in package checksum for module $mod" >&2; return 1
    fi
}

###
#
#
pkg_uninstall() {
    local mod="$1"
    local file
    
    echo "Uninstalling module '$mod'"
    
    echo -e "\tRunning uninstall script"
    if [ -f "$home/$mod/uninstall" ]; then
        if ! bash "$home/$mod/uninstall" > >(sed 's/\(.*\)/\t\1/') 2> >(sed 's/\(.*\)/\t\1/' >&2); then
            echo -e "\tThe uninstall script failed to run properly" >&2
        fi
    fi
    
    echo -e "\tRemoving files"
    for file in `tac "$home/$mod/files.lst"`; do
        if grep -qe '/$' <<< "$file"; then
            if [ -d "/$file" ] && [ -z "$(ls -A "/$file")" ]; then
                rmdir "/$file" 2>/dev/null
                
            else
                echo -e "\tNot removing '/$file'. Directory is not empty" >&2
            fi
        
        else
            rm "/$file" 2>/dev/null
        fi
    done
    
    echo -e "\tFinalizing module removal"
    rm "$home/$mod"/* 2>/dev/null
    rmdir "$home/$mod" 2>/dev/null
}

###
#
#
{
    echo "Started at `date '+%Y-%m-%d %H:%M'`"
    echo "Contacting the server $domain"

    if ping -q -c 1 -W 1 $domain >/dev/null 2>&1; then
        if $webchk $manifest >/dev/null 2>&1 && $webdl $manifest | tee /tmp/manifest.yml | grep -qe '^[\s ]*modules:'; then
            nhash=`md5sum /tmp/manifest.yml 2>/dev/null | awk '{print $1}'`
            ohash=`cat "$home/manifest.md5" 2>/dev/null`
            
            if [[ "$nhash" != "$ohash" ]]; then
                eval $(yml_parse /tmp/manifest.yml)
                
                echo "Checking for old modules"
                for dir in "$home"/*; do
                    if [ -d "$dir" ]; then
                        mod="`basename "$dir"`"
                        hash=`cat "$home/$mod/hash.md5" 2>/dev/null`

                        if ! [[ " `yml_get modules` " =~ " $mod " ]]; then
                            for defmod in `yml_get modules`; do
                                if yml_cmp %s_file_md5 "$hash" "$defmod"; then
                                    echo "Renaming module `basename "$mod"` -> $defmod"
                                    mv "$home/$mod" "$home/$defmod"
                                    
                                    continue 2
                                fi
                            done
                        
                            pkg_uninstall $mod
                        fi
                    fi
                done
                
                echo "Checking for new/updated modules"
                for mod in `yml_get modules`; do
                    if ! yml_defined %s_condition $mod || eval $(yml_get %s_condition $mod) >/dev/null 2>&1; then
                        hash=`cat "$home/$mod/hash.md5" 2>/dev/null`
                        
                        if yml_defined %s_file_path $mod && ! yml_cmp %s_file_md5 "$hash" "$mod"; then
                            pkgfile="$address/$(yml_get %s_file_path $mod)"
                            
                            if $webchk $pkgfile >/dev/null 2>&1; then
                                pkg_install $mod $pkgfile
                            
                            else
                                echo "No package is defined for the module $mod" >&2
                            fi
                        
                        elif ! yml_defined %s_file_path $mod; then
                            echo "No package is available for the module $mod" >&2
                        fi
                    
                    elif yml_defined %s_condition $mod && [ -d "$home/$mod" ]; then
                        pkg_uninstall $mod
                    fi
                done
                
                echo $nhash > "$home/manifest.md5"
            
            else
                echo "No changes was detected"
            fi
            
            rm /tmp/manifest.yml 2>/dev/null
        
        else
            echo "Manifest resource is unavailable" >&2; exit 1
        fi
        
    else
        echo "Connection timed out" >&2; exit 1
    fi

    echo "Sync complete"
    
    exit
}

